/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.za.verify;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-19")
public class VerifyRequestService {

  public interface Iface {

    public void verifyAndSubmit(List<String> request) throws org.apache.thrift.TException;

    public void reloadProductIds(String appId, String appUrl, int timeOut) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void verifyAndSubmit(List<String> request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reloadProductIds(String appId, String appUrl, int timeOut, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void verifyAndSubmit(List<String> request) throws org.apache.thrift.TException
    {
      send_verifyAndSubmit(request);
    }

    public void send_verifyAndSubmit(List<String> request) throws org.apache.thrift.TException
    {
      verifyAndSubmit_args args = new verifyAndSubmit_args();
      args.setRequest(request);
      sendBase("verifyAndSubmit", args);
    }

    public void reloadProductIds(String appId, String appUrl, int timeOut) throws org.apache.thrift.TException
    {
      send_reloadProductIds(appId, appUrl, timeOut);
    }

    public void send_reloadProductIds(String appId, String appUrl, int timeOut) throws org.apache.thrift.TException
    {
      reloadProductIds_args args = new reloadProductIds_args();
      args.setAppId(appId);
      args.setAppUrl(appUrl);
      args.setTimeOut(timeOut);
      sendBase("reloadProductIds", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void verifyAndSubmit(List<String> request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyAndSubmit_call method_call = new verifyAndSubmit_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyAndSubmit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> request;
      public verifyAndSubmit_call(List<String> request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyAndSubmit", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        verifyAndSubmit_args args = new verifyAndSubmit_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void reloadProductIds(String appId, String appUrl, int timeOut, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reloadProductIds_call method_call = new reloadProductIds_call(appId, appUrl, timeOut, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reloadProductIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appId;
      private String appUrl;
      private int timeOut;
      public reloadProductIds_call(String appId, String appUrl, int timeOut, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.appId = appId;
        this.appUrl = appUrl;
        this.timeOut = timeOut;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reloadProductIds", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        reloadProductIds_args args = new reloadProductIds_args();
        args.setAppId(appId);
        args.setAppUrl(appUrl);
        args.setTimeOut(timeOut);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("verifyAndSubmit", new verifyAndSubmit());
      processMap.put("reloadProductIds", new reloadProductIds());
      return processMap;
    }

    public static class verifyAndSubmit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyAndSubmit_args> {
      public verifyAndSubmit() {
        super("verifyAndSubmit");
      }

      public verifyAndSubmit_args getEmptyArgsInstance() {
        return new verifyAndSubmit_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, verifyAndSubmit_args args) throws org.apache.thrift.TException {
        iface.verifyAndSubmit(args.request);
        return null;
      }
    }

    public static class reloadProductIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reloadProductIds_args> {
      public reloadProductIds() {
        super("reloadProductIds");
      }

      public reloadProductIds_args getEmptyArgsInstance() {
        return new reloadProductIds_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, reloadProductIds_args args) throws org.apache.thrift.TException {
        iface.reloadProductIds(args.appId, args.appUrl, args.timeOut);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("verifyAndSubmit", new verifyAndSubmit());
      processMap.put("reloadProductIds", new reloadProductIds());
      return processMap;
    }

    public static class verifyAndSubmit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyAndSubmit_args, Void> {
      public verifyAndSubmit() {
        super("verifyAndSubmit");
      }

      public verifyAndSubmit_args getEmptyArgsInstance() {
        return new verifyAndSubmit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, verifyAndSubmit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.verifyAndSubmit(args.request,resultHandler);
      }
    }

    public static class reloadProductIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reloadProductIds_args, Void> {
      public reloadProductIds() {
        super("reloadProductIds");
      }

      public reloadProductIds_args getEmptyArgsInstance() {
        return new reloadProductIds_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, reloadProductIds_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.reloadProductIds(args.appId, args.appUrl, args.timeOut,resultHandler);
      }
    }

  }

  public static class verifyAndSubmit_args implements org.apache.thrift.TBase<verifyAndSubmit_args, verifyAndSubmit_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyAndSubmit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyAndSubmit_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyAndSubmit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyAndSubmit_argsTupleSchemeFactory());
    }

    public List<String> request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyAndSubmit_args.class, metaDataMap);
    }

    public verifyAndSubmit_args() {
    }

    public verifyAndSubmit_args(
      List<String> request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyAndSubmit_args(verifyAndSubmit_args other) {
      if (other.isSetRequest()) {
        List<String> __this__request = new ArrayList<String>(other.request);
        this.request = __this__request;
      }
    }

    public verifyAndSubmit_args deepCopy() {
      return new verifyAndSubmit_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public int getRequestSize() {
      return (this.request == null) ? 0 : this.request.size();
    }

    public java.util.Iterator<String> getRequestIterator() {
      return (this.request == null) ? null : this.request.iterator();
    }

    public void addToRequest(String elem) {
      if (this.request == null) {
        this.request = new ArrayList<String>();
      }
      this.request.add(elem);
    }

    public List<String> getRequest() {
      return this.request;
    }

    public verifyAndSubmit_args setRequest(List<String> request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyAndSubmit_args)
        return this.equals((verifyAndSubmit_args)that);
      return false;
    }

    public boolean equals(verifyAndSubmit_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyAndSubmit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyAndSubmit_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyAndSubmit_argsStandardSchemeFactory implements SchemeFactory {
      public verifyAndSubmit_argsStandardScheme getScheme() {
        return new verifyAndSubmit_argsStandardScheme();
      }
    }

    private static class verifyAndSubmit_argsStandardScheme extends StandardScheme<verifyAndSubmit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyAndSubmit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.request = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.request.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyAndSubmit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.request.size()));
            for (String _iter3 : struct.request)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyAndSubmit_argsTupleSchemeFactory implements SchemeFactory {
      public verifyAndSubmit_argsTupleScheme getScheme() {
        return new verifyAndSubmit_argsTupleScheme();
      }
    }

    private static class verifyAndSubmit_argsTupleScheme extends TupleScheme<verifyAndSubmit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyAndSubmit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          {
            oprot.writeI32(struct.request.size());
            for (String _iter4 : struct.request)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyAndSubmit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.request = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.request.add(_elem6);
            }
          }
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class reloadProductIds_args implements org.apache.thrift.TBase<reloadProductIds_args, reloadProductIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<reloadProductIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reloadProductIds_args");

    private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("appUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeOut", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reloadProductIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reloadProductIds_argsTupleSchemeFactory());
    }

    public String appId; // required
    public String appUrl; // required
    public int timeOut; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_ID((short)1, "appId"),
      APP_URL((short)2, "appUrl"),
      TIME_OUT((short)3, "timeOut");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_ID
            return APP_ID;
          case 2: // APP_URL
            return APP_URL;
          case 3: // TIME_OUT
            return TIME_OUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_URL, new org.apache.thrift.meta_data.FieldMetaData("appUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME_OUT, new org.apache.thrift.meta_data.FieldMetaData("timeOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reloadProductIds_args.class, metaDataMap);
    }

    public reloadProductIds_args() {
    }

    public reloadProductIds_args(
      String appId,
      String appUrl,
      int timeOut)
    {
      this();
      this.appId = appId;
      this.appUrl = appUrl;
      this.timeOut = timeOut;
      setTimeOutIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reloadProductIds_args(reloadProductIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppId()) {
        this.appId = other.appId;
      }
      if (other.isSetAppUrl()) {
        this.appUrl = other.appUrl;
      }
      this.timeOut = other.timeOut;
    }

    public reloadProductIds_args deepCopy() {
      return new reloadProductIds_args(this);
    }

    @Override
    public void clear() {
      this.appId = null;
      this.appUrl = null;
      setTimeOutIsSet(false);
      this.timeOut = 0;
    }

    public String getAppId() {
      return this.appId;
    }

    public reloadProductIds_args setAppId(String appId) {
      this.appId = appId;
      return this;
    }

    public void unsetAppId() {
      this.appId = null;
    }

    /** Returns true if field appId is set (has been assigned a value) and false otherwise */
    public boolean isSetAppId() {
      return this.appId != null;
    }

    public void setAppIdIsSet(boolean value) {
      if (!value) {
        this.appId = null;
      }
    }

    public String getAppUrl() {
      return this.appUrl;
    }

    public reloadProductIds_args setAppUrl(String appUrl) {
      this.appUrl = appUrl;
      return this;
    }

    public void unsetAppUrl() {
      this.appUrl = null;
    }

    /** Returns true if field appUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetAppUrl() {
      return this.appUrl != null;
    }

    public void setAppUrlIsSet(boolean value) {
      if (!value) {
        this.appUrl = null;
      }
    }

    public int getTimeOut() {
      return this.timeOut;
    }

    public reloadProductIds_args setTimeOut(int timeOut) {
      this.timeOut = timeOut;
      setTimeOutIsSet(true);
      return this;
    }

    public void unsetTimeOut() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
    }

    /** Returns true if field timeOut is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeOut() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
    }

    public void setTimeOutIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_ID:
        if (value == null) {
          unsetAppId();
        } else {
          setAppId((String)value);
        }
        break;

      case APP_URL:
        if (value == null) {
          unsetAppUrl();
        } else {
          setAppUrl((String)value);
        }
        break;

      case TIME_OUT:
        if (value == null) {
          unsetTimeOut();
        } else {
          setTimeOut((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_ID:
        return getAppId();

      case APP_URL:
        return getAppUrl();

      case TIME_OUT:
        return Integer.valueOf(getTimeOut());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_ID:
        return isSetAppId();
      case APP_URL:
        return isSetAppUrl();
      case TIME_OUT:
        return isSetTimeOut();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reloadProductIds_args)
        return this.equals((reloadProductIds_args)that);
      return false;
    }

    public boolean equals(reloadProductIds_args that) {
      if (that == null)
        return false;

      boolean this_present_appId = true && this.isSetAppId();
      boolean that_present_appId = true && that.isSetAppId();
      if (this_present_appId || that_present_appId) {
        if (!(this_present_appId && that_present_appId))
          return false;
        if (!this.appId.equals(that.appId))
          return false;
      }

      boolean this_present_appUrl = true && this.isSetAppUrl();
      boolean that_present_appUrl = true && that.isSetAppUrl();
      if (this_present_appUrl || that_present_appUrl) {
        if (!(this_present_appUrl && that_present_appUrl))
          return false;
        if (!this.appUrl.equals(that.appUrl))
          return false;
      }

      boolean this_present_timeOut = true;
      boolean that_present_timeOut = true;
      if (this_present_timeOut || that_present_timeOut) {
        if (!(this_present_timeOut && that_present_timeOut))
          return false;
        if (this.timeOut != that.timeOut)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appId = true && (isSetAppId());
      list.add(present_appId);
      if (present_appId)
        list.add(appId);

      boolean present_appUrl = true && (isSetAppUrl());
      list.add(present_appUrl);
      if (present_appUrl)
        list.add(appUrl);

      boolean present_timeOut = true;
      list.add(present_timeOut);
      if (present_timeOut)
        list.add(timeOut);

      return list.hashCode();
    }

    @Override
    public int compareTo(reloadProductIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppUrl()).compareTo(other.isSetAppUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appUrl, other.appUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeOut()).compareTo(other.isSetTimeOut());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeOut()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeOut, other.timeOut);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reloadProductIds_args(");
      boolean first = true;

      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appUrl:");
      if (this.appUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.appUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeOut:");
      sb.append(this.timeOut);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reloadProductIds_argsStandardSchemeFactory implements SchemeFactory {
      public reloadProductIds_argsStandardScheme getScheme() {
        return new reloadProductIds_argsStandardScheme();
      }
    }

    private static class reloadProductIds_argsStandardScheme extends StandardScheme<reloadProductIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reloadProductIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appId = iprot.readString();
                struct.setAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APP_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appUrl = iprot.readString();
                struct.setAppUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME_OUT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.timeOut = iprot.readI32();
                struct.setTimeOutIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reloadProductIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appId != null) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
        if (struct.appUrl != null) {
          oprot.writeFieldBegin(APP_URL_FIELD_DESC);
          oprot.writeString(struct.appUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_OUT_FIELD_DESC);
        oprot.writeI32(struct.timeOut);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reloadProductIds_argsTupleSchemeFactory implements SchemeFactory {
      public reloadProductIds_argsTupleScheme getScheme() {
        return new reloadProductIds_argsTupleScheme();
      }
    }

    private static class reloadProductIds_argsTupleScheme extends TupleScheme<reloadProductIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reloadProductIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppId()) {
          optionals.set(0);
        }
        if (struct.isSetAppUrl()) {
          optionals.set(1);
        }
        if (struct.isSetTimeOut()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAppId()) {
          oprot.writeString(struct.appId);
        }
        if (struct.isSetAppUrl()) {
          oprot.writeString(struct.appUrl);
        }
        if (struct.isSetTimeOut()) {
          oprot.writeI32(struct.timeOut);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reloadProductIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.appId = iprot.readString();
          struct.setAppIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appUrl = iprot.readString();
          struct.setAppUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeOut = iprot.readI32();
          struct.setTimeOutIsSet(true);
        }
      }
    }

  }

}
